using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Accounts;
using Nethereum.Util;
using Nethereum.Web3;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Nethereum.RPC.Eth.DTOs;
using Xunit;
using Account = Nethereum.Web3.Accounts.Account;

namespace VMR.Tests
{
    public static class Extensions
    {

        public static byte[] ToBytes32(this string input)
        {
            var bytes = Encoding.UTF8.GetBytes(input);
            if(bytes.Length > 32) throw new ArgumentException("input exceeds 32 bytes");
            var returnBytes = new byte[32];
            Array.Copy(bytes, 0, returnBytes, 0, bytes.Length);
            return returnBytes;
        }

        public static async Task<TransactionReceipt> Execute<FunctionMessageType>(this FunctionMessageType function, string contractAddress, IAccount fromAddress)
            where FunctionMessageType : FunctionMessage, new()
        {
            var web3 = new Web3(fromAddress);
            var handler = web3.Eth.GetContractHandler(contractAddress);
            return await handler.SendRequestAndWaitForReceiptAsync(function);
        }

        public static Tuple<IAccount, string> Contract(this IAccount account, string contractAddress)
        {
            return new Tuple<IAccount, string>(account, contractAddress);
        }

        public static async Task<TransactionReceipt> Execute<FunctionMessageType>(this Tuple<IAccount, string> accountAndContract, FunctionMessageType function)
            where FunctionMessageType : FunctionMessage, new()
        {
            return await accountAndContract.Item1.Execute(accountAndContract.Item2, function);
        }

        public static async Task<TransactionReceipt> Execute<FunctionMessageType>(this Tuple<IAccount, string> accountAndContract)
            where FunctionMessageType : FunctionMessage, new()
        {
            return await accountAndContract.Item1.Execute<FunctionMessageType>(accountAndContract.Item2);
        }

        public static async Task<TransactionReceipt> Execute<FunctionMessageType>(this IAccount account, string contractAddress)
            where FunctionMessageType : FunctionMessage, new()
        {
            var function = Activator.CreateInstance<FunctionMessageType>();
            return await account.Execute(contractAddress, function);
        }

        public static async Task<TransactionReceipt> Execute<FunctionMessageType>(this IAccount account, string contractAddress, FunctionMessageType function)
            where FunctionMessageType : FunctionMessage, new()
        {
            return await function.Execute(contractAddress, account);
        }

        public static async Task<ReturnType> Query<FunctionMessageType, ReturnType>(this FunctionMessageType function, IAccount fromAccount, string contractAddress)
            where FunctionMessageType : FunctionMessage, new()
        {
            var web3 = new Web3(fromAccount);
            var handler = web3.Eth.GetContractHandler(contractAddress);
            return await handler.QueryAsync<FunctionMessageType, ReturnType>(function);
        }

        public static async Task<ReturnType> Query<FunctionMessageType, ReturnType>(
            this Tuple<IAccount, string> accountAndContract)
            where FunctionMessageType : FunctionMessage, new()
        {
            var function = Activator.CreateInstance<FunctionMessageType>();
            return await function.Query<FunctionMessageType, ReturnType>(accountAndContract.Item1, accountAndContract.Item2);
        }

        public static async Task<ReturnType> Query<FunctionMessageType, ReturnType>(
            this Tuple<IAccount, string> accountAndContract, FunctionMessageType function)
            where FunctionMessageType : FunctionMessage, new()
        {
            return await function.Query<FunctionMessageType, ReturnType>(accountAndContract.Item1, accountAndContract.Item2);
        }

    }

    public static class Accounts
    {
        public static readonly IAccount Default = new Account("909acfe79360b98131c4208ddaddbc4727359d6400a2747debbba8578b410525");
        public static readonly IAccount RegistryOwner = new Account("909acfe79360b98131c4208ddaddbc4727359d6400a2747debbba8578b410525");
        public static readonly IAccount Ford = new Account("5fc52d1eb267d00fab8cf78d1e78d4d832418f5650cbadcab743d3c5e1513ebf");
        public static readonly IAccount FordServiceCentre = new Account("77a0b942e144b6827e5d1cb51e1d76a3c670aaa1354769a3d4321eec2bd93f20");
        public static readonly IAccount SmithsGarage = new Account("14b89b59972c8a6744eb2c62931f09e274a64dd08b6da4ac415b3691dd4ffe7d");
    }

    public class DeploymentTests
    {
        [Function("registerMember", "uint256")]
        public class RegisterMemberFunction: FunctionMessage
        {
            [Parameter("bytes32", "_memberId", 1)]
            public byte[] MemberId {get; set;}
        }

        [Function("getMemberOwner", "address")]
        public class GetMemberOwnerFunction:FunctionMessage{}

        [Function("owner", "address")]
        public class OwnerFunction:FunctionMessage{}

        [Function("feeLookupAddress", "address")]
        public class FeeLookupAddressFunction:FunctionMessage{}

        [Function("storageAddress", "address")]
        public class StorageAddressFunction:FunctionMessage{}

        [Function("bindToContract")]
        public class BindToContractFunction : FunctionMessage
        {
            [Parameter("address", "_contractAddress", 1)]
            public virtual string ContractAddress {get; set;}
        }

        [Function("getStorageInitialised", "bool")]
        public class GetStorageInitialiseFunction : FunctionMessage{}

        [Function("getContractAddress", "address")]
        public class GetContractAddressFunction : FunctionMessage{}

        [Function("pause")]
        public class PauseFunction : FunctionMessage{}

        [Function("unpause")]
        public class UnpauseFunction: FunctionMessage{}

        [Function("transferMemberOwnership")]
        public class TransferMemberOwnershipFunction:FunctionMessage
        {
            [Parameter("uint256", "_memberNumber", 1)]
            public BigInteger MemberNumber {get; set;}
            [Parameter("address", "_newOwner", 2)]
            public string NewOwner {get; set;}
            [Parameter("bytes32", "_keyHash", 3)]
            public byte[] KeyHash {get; set;}
        }

        [Function("acceptMemberOwnership")]
        public class AcceptMemberOwnershipFunction:FunctionMessage
        {
            [Parameter("uint256", "_memberNumber", 1)]
            public BigInteger MemberNumber {get; set;}
            [Parameter("string", "_key", 2)]
            public string Key {get; set;}
        }

        [FunctionOutput]
        public class GetMemberOutputDTO
        {
            [Parameter("uint256", "memberNumber", 1)]
            public BigInteger MemberNumber {get; set;}
            [Parameter("bytes32", "memberId", 2)]
            public byte[] MemberId {get; set;}
            [Parameter("address", "owner", 3)]
            public string Owner {get; set;}
            [Parameter("bool", "enabled", 4)]
            public bool Enabled {get; set;}
            [Parameter("uint256", "created", 5)]
            public BigInteger Created {get; set;}
        }

        [Function("getMember", typeof(GetMemberOutputDTO))]
        public class GetMemberFunction:FunctionMessage
        {
            [Parameter("uint256", "_memberNumber", 1)]
            public BigInteger MemberNumber {get; set;}
        }

        private const string SolidityContractFolder = "../../../../../../bin/contracts/";

        public static class Abis
        {
            public const string ByteUtilsLib = "ByteUtilsLib.abi";
            public const string EternalStorage = "EternalStorage.abi";
            public const string RegistryStorageLib = "RegistryStorageLib.abi";
            public const string MockFeeChecker = "MockFeeChecker.abi";
            public const string ManufacturerRegistry = "ManufacturerRegistry.abi";
            public const string MaintainerRegistry = "MaintainerRegistry.abi";
            public const string VehicleRegistry = "VehicleRegistry.abi";
            public const string MaintenanceLog = "MaintenanceLog.abi";
        }

        [Fact]
        public async Task DeployAndLinkLibraries()
        {
            var byteUtilsLibAddress = 
                await DeployContract(Accounts.RegistryOwner, Abis.ByteUtilsLib);

            var manufacturerRegistryStorageAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.EternalStorage);
   
            var maintainerRegistryStorageAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.EternalStorage);

            var vehicleRegistryStorageAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.EternalStorage);

            var registryStorageLibAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.RegistryStorageLib);

            var mockFeeCheckerAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.MockFeeChecker,
                    new object[] {0});

            var manufacturerRegistryAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.ManufacturerRegistry,
                    new object[]{manufacturerRegistryStorageAddress, mockFeeCheckerAddress},
                    new[]
                    {
                        new Tuple<string, string>("c:/dev/repos/VehicleMaintenanceRegis", $"{registryStorageLibAddress}")
                    });

            var maintainerRegistryAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.MaintainerRegistry,
                    new object[]{maintainerRegistryStorageAddress, mockFeeCheckerAddress},
                    new[]
                    {
                        new Tuple<string, string>("c:/dev/repos/VehicleMaintenanceRegis", $"{registryStorageLibAddress}")
                    });

            var vehicleRegistryAddress =
                await DeployContract(Accounts.RegistryOwner, Abis.VehicleRegistry,
                    new object[]{maintainerRegistryStorageAddress, mockFeeCheckerAddress, manufacturerRegistryAddress},
                    new[]
                    {
                        new Tuple<string, string>("c:/dev/repos/VehicleMaintenanceRegis", $"{registryStorageLibAddress}")
                    });

            await Accounts.RegistryOwner
                .Contract(manufacturerRegistryStorageAddress)
                .Execute(new BindToContractFunction {ContractAddress = manufacturerRegistryAddress});
            
            var registerMemberReceipt = await Accounts.RegistryOwner.Contract(manufacturerRegistryAddress)
                .Execute(new RegisterMemberFunction {MemberId = "Ford".ToBytes32(), Gas = 4712388 });

            
            var web3 = new Web3();
            var tx = await web3.Eth.Transactions.GetTransactionByHash.SendRequestAsync(registerMemberReceipt.TransactionHash);

            var ford = await Accounts.Default.Contract(manufacturerRegistryAddress)
                .Query<GetMemberFunction, GetMemberOutputDTO>(new GetMemberFunction
                {
                    MemberNumber = 1
                });

            var transferKey = "shhhhh";
            var transferKeyHash = transferKey.ToBytes32();

            await Accounts.RegistryOwner.Contract(manufacturerRegistryAddress)
                .Execute(new TransferMemberOwnershipFunction
                {
                    MemberNumber = new HexBigInteger(1),
                    NewOwner = Accounts.Ford.Address,
                    KeyHash = transferKeyHash,
                    Gas = 4712388 
                });

            await Accounts.Ford.Contract(manufacturerRegistryAddress)
                .Execute(new AcceptMemberOwnershipFunction
                {
                    MemberNumber = new HexBigInteger(1), 
                    Key = transferKey, 
                    Gas = 4712388 
                });


            /*            var maintenanceLogStorageAddress =
                await DeployContract(Accounts.Ford, "EternalStorage.abi");

            */

            /*
            await SendTransaction(
                registryOwner, manufacturerRegistryAddress, "ManufacturerRegistry.abi", "transferMemberOwnership", transferArgs);

            var acceptArgs = new object[] {1, transferKey};

            await SendTransaction(
                ford, manufacturerRegistryAddress, "ManufacturerRegistry.abi", "acceptMemberOwnership", acceptArgs);

            //acceptMemberOwnership
            */
            

        }

        [Fact]
        public async Task ExtractLibraryPlaceholders()
        {
            const string byteCode =
                "60806040526001805460a060020a60ff02191690553480156200002157600080fd5b506040516040806200282883398101604052805160209091015160008054600160a060020a031916331790556200006f600160a060020a03831664010000000062002337620000db82021704565b15156200007b57600080fd5b6200009d600160a060020a03821664010000000062002337620000db82021704565b1515620000a957600080fd5b60028054600160a060020a03938416600160a060020a03199182161790915560038054929093169116179055620000e3565b6000903b1190565b61273580620000f36000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166314ef55b9811461018c57806324ce2195146101b65780632a9cbbed146101ca5780632e1a7d4d1461020b5780633f4ba83a146102165780633f97cddc1461022b57806346dbf2541461027c5780634b3cb584146102915780634bd3dbb9146102c55780634e71e0c8146102d057806358c34074146102e557806359b910d6146102fa5780635c975abb1461031b578063715018a6146103445780637aaca2f8146103595780638456cb591461036d57806385aa92a7146103825780638da5cb5b14610397578063a79e6533146103ac578063ab3545e5146103c4578063ad1c5a7a14610411578063b44691d61461042b578063b8f5138e14610446578063c02b499114610451578063c65a9d3014610469578063c6786e5a1461048a578063ca4967d5146104df578063de71e19a14610500578063e30c397814610518578063f2fde38b1461052d578063fd8785c91461054e575b005b34801561019857600080fd5b506101a4600435610559565b60408051918252519081900360200190f35b61018a60043560243560443560643561060c565b3480156101d657600080fd5b506101e5600435602435610950565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61018a600435610a2a565b34801561022257600080fd5b5061018a610a7e565b60408051602060046024803582810135601f810185900485028601850190965285855261018a958335953695604494919390910191908190840183828082843750949750610af69650505050505050565b34801561028857600080fd5b506101a4610ec9565b34801561029d57600080fd5b506102a9600435610f74565b60408051600160a060020a039092168252519081900360200190f35b61018a600435610f9d565b3480156102dc57600080fd5b5061018a6111ee565b3480156102f157600080fd5b506102a9611276565b34801561030657600080fd5b5061018a600160a060020a0360043516611285565b34801561032757600080fd5b50610330611307565b604080519115158252519081900360200190f35b34801561035057600080fd5b5061018a611317565b6101a4600435602435604435606435611383565b34801561037957600080fd5b5061018a611629565b34801561038e57600080fd5b506102a96116a6565b3480156103a357600080fd5b506102a96116b5565b3480156103b857600080fd5b506103306004356116c4565b3480156103d057600080fd5b506103dc60043561172f565b604080519586526020860194909452600160a060020a0390921684840152151560608401526080830152519081900360a00190f35b61018a600435600160a060020a036024351660443561180b565b34801561043757600080fd5b506101a4600435602435611b11565b61018a600435611bcc565b34801561045d57600080fd5b50610330600435611e1e565b34801561047557600080fd5b50610330600160a060020a0360043516611e47565b34801561049657600080fd5b506040805160206004803580820135838102808601850190965280855261018a95369593946024949385019291829185019084908082843750949750611e5b9650505050505050565b3480156104eb57600080fd5b5061018a600160a060020a0360043516611fe2565b34801561050c57600080fd5b506101a4600435612064565b34801561052457600080fd5b506102a96120e5565b34801561053957600080fd5b5061018a600160a060020a03600435166120f4565b6101a460043561213a565b600254604080517fbd64b8a6000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018390525160009173__c:/dev/repos/VehicleMaintenanceRegis__9163bd64b8a691604480820192602092909190829003018186803b1580156105da57600080fd5b505af41580156105ee573d6000803e3d6000fd5b505050506040513d602081101561060457600080fd5b505192915050565b60015460009060a060020a900460ff161561062657600080fd5b600254604080517f267db979000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820187905233604483015251869173__c:/dev/repos/VehicleMaintenanceRegis__9163267db97991606480820192602092909190829003018186803b1580156106ac57600080fd5b505af41580156106c0573d6000803e3d6000fd5b505050506040513d60208110156106d657600080fd5b505115156106e357600080fd5b600254604080517f775abae4000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820188905260448201879052518791879173__c:/dev/repos/VehicleMaintenanceRegis__9163775abae4916064808301926020929190829003018186803b15801561076b57600080fd5b505af415801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b505115156107a257600080fd5b600254604080517ff9db0652000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018a9052604482018990526064820188905260848201879052518991899173__c:/dev/repos/VehicleMaintenanceRegis__9163f9db06529160a4808301926000929190829003018186803b15801561083857600080fd5b505af415801561084c573d6000803e3d6000fd5b5050600254604080517fafeef9b8000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018e9052604482018d90525173__c:/dev/repos/VehicleMaintenanceRegis__935063afeef9b892506064808301926020929190829003018186803b1580156108d457600080fd5b505af41580156108e8573d6000803e3d6000fd5b505050506040513d60208110156108fe57600080fd5b5051604080518a8152602081018a9052815192985088928c928e927fc4970cc78910aa0998aca6333d6db8a393651a6560a464ddc2d6bbbed55cfc1e929081900390910190a450505050505050505050565b600254604080517f90c3daf2000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201849052604482018390525160009182918291829173__c:/dev/repos/VehicleMaintenanceRegis__916390c3daf2916064808301926080929190829003018186803b1580156109dd57600080fd5b505af41580156109f1573d6000803e3d6000fd5b505050506040513d6080811015610a0757600080fd5b508051602082015160408301516060909301519199909850919650945092505050565b600054600160a060020a03163314610a4157600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610a7a573d6000803e3d6000fd5b5050565b600054600160a060020a03163314610a9557600080fd5b60015460a060020a900460ff161515610aad57600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60015460a060020a900460ff1615610b0d57600080fd5b6002546040805160e660020a6303310377028152600160a060020a0390921660048301526024820184905251839173__c:/dev/repos/VehicleMaintenanceRegis__9163cc40ddc091604480820192602092909190829003018186803b158015610b7757600080fd5b505af4158015610b8b573d6000803e3d6000fd5b505050506040513d6020811015610ba157600080fd5b50511515610bae57600080fd5b600254604080517fb3931864000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052518491339173__c:/dev/repos/VehicleMaintenanceRegis__9163b3931864916044808301926020929190829003018186803b158015610c2f57600080fd5b505af4158015610c43573d6000803e3d6000fd5b505050506040513d6020811015610c5957600080fd5b5051600160a060020a031614610c6e57600080fd5b600254604080517f634a349d000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018690525185918591600091829173__c:/dev/repos/VehicleMaintenanceRegis__9163634a349d916044808301926020929190829003018186803b158015610cf457600080fd5b505af4158015610d08573d6000803e3d6000fd5b505050506040513d6020811015610d1e57600080fd5b5051604051845191935084916020918201918291908401908083835b60208310610d595780518252601f199092019160209182019101610d3a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610dbc5780518252601f199092019160209182019101610d9d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050508282149050610df757600080fd5b600254604080517f5821edb0000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018a90523360448301525173__c:/dev/repos/VehicleMaintenanceRegis__91635821edb0916064808301926000929190829003018186803b158015610e7a57600080fd5b505af4158015610e8e573d6000803e3d6000fd5b50506040513392508a91507feacf7aee9e4ba56fb2dcdea3b816570de0f2a2e54f43a87a96286bcddec9488990600090a35050505050505050565b600254604080517f04543b61000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301525160009173__c:/dev/repos/VehicleMaintenanceRegis__916304543b6191602480820192602092909190829003018186803b158015610f4357600080fd5b505af4158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b5051905090565b600254600090610f9390600160a060020a03168363ffffffff61230f16565b6040015192915050565b60015460a060020a900460ff1615610fb457600080fd5b600054600160a060020a03163314610fcb57600080fd5b6002546040805160e660020a6303310377028152600160a060020a0390921660048301526024820183905251829173__c:/dev/repos/VehicleMaintenanceRegis__9163cc40ddc091604480820192602092909190829003018186803b15801561103557600080fd5b505af4158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b5051151561106c57600080fd5b600254604080517fac926120000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820184905251839173__c:/dev/repos/VehicleMaintenanceRegis__9163ac92612091604480820192602092909190829003018186803b1580156110ec57600080fd5b505af4158015611100573d6000803e3d6000fd5b505050506040513d602081101561111657600080fd5b50511561112257600080fd5b600254604080517fd8263dac000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052600160448301525173__c:/dev/repos/VehicleMaintenanceRegis__9163d8263dac916064808301926000929190829003018186803b1580156111a657600080fd5b505af41580156111ba573d6000803e3d6000fd5b50506040518592507f6c1c54cd1cc41dc1d40182830f8d9a3d73a7775038c567cb154b38a2355da9a19150600090a2505050565b600154600160a060020a0316331461120557600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600354600160a060020a031681565b600054600160a060020a0316331461129c57600080fd5b600254600160a060020a03908116908290811682148015906112cb57506112cb81600160a060020a0316612337565b15156112d657600080fd5b50506002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015460a060020a900460ff1681565b600054600160a060020a0316331461132e57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600154600090819060a060020a900460ff161561139f57600080fd5b600254604080517f267db979000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820188905233604483015251879173__c:/dev/repos/VehicleMaintenanceRegis__9163267db97991606480820192602092909190829003018186803b15801561142557600080fd5b505af4158015611439573d6000803e3d6000fd5b505050506040513d602081101561144f57600080fd5b5051151561145c57600080fd5b600254604080517f9b15b8b2000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820189905260448201889052518891889173__c:/dev/repos/VehicleMaintenanceRegis__91639b15b8b2916064808301926020929190829003018186803b1580156114e457600080fd5b505af41580156114f8573d6000803e3d6000fd5b505050506040513d602081101561150e57600080fd5b50511561151a57600080fd5b600254604080517fcbc4a142000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018b9052604482018a905260648201899052608482018890525173__c:/dev/repos/VehicleMaintenanceRegis__9163cbc4a1429160a4808301926020929190829003018186803b1580156115ac57600080fd5b505af41580156115c0573d6000803e3d6000fd5b505050506040513d60208110156115d657600080fd5b5051604080518981526020810189905281519296508a9287928d927fc4970cc78910aa0998aca6333d6db8a393651a6560a464ddc2d6bbbed55cfc1e929081900390910190a45091979650505050505050565b600054600160a060020a0316331461164057600080fd5b60015460a060020a900460ff161561165757600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600254600160a060020a031681565b600054600160a060020a031681565b6002546040805160e660020a6303310377028152600160a060020a039092166004830152602482018390525160009173__c:/dev/repos/VehicleMaintenanceRegis__9163cc40ddc091604480820192602092909190829003018186803b1580156105da57600080fd5b600254604080517f7c1643bc000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820183905251600091829182918291829173__c:/dev/repos/VehicleMaintenanceRegis__91637c1643bc9160448082019260a092909190829003018186803b1580156117b857600080fd5b505af41580156117cc573d6000803e3d6000fd5b505050506040513d60a08110156117e257600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b60015460009060a060020a900460ff161561182557600080fd5b600254604080517f267db979000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820186905233604483015251859173__c:/dev/repos/VehicleMaintenanceRegis__9163267db97991606480820192602092909190829003018186803b1580156118ab57600080fd5b505af41580156118bf573d6000803e3d6000fd5b505050506040513d60208110156118d557600080fd5b505115156118e257600080fd5b600354604080517f88a6f57200000000000000000000000000000000000000000000000000000000815290513492600160a060020a0316916388a6f5729160048083019260209291908290030181600087803b15801561194157600080fd5b505af1158015611955573d6000803e3d6000fd5b505050506040513d602081101561196b57600080fd5b5051111561197857600080fd5b600254604080517fdf3967f2000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018790525173__c:/dev/repos/VehicleMaintenanceRegis__9163df3967f2916044808301926020929190829003018186803b1580156119f557600080fd5b505af4158015611a09573d6000803e3d6000fd5b505050506040513d6020811015611a1f57600080fd5b5051600254604080517f14b4b68a000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018990529187166044830152606482018690525191935073__c:/dev/repos/VehicleMaintenanceRegis__916314b4b68a91608480820192600092909190829003018186803b158015611ab157600080fd5b505af4158015611ac5573d6000803e3d6000fd5b5050505083600160a060020a031682600160a060020a0316867f16da62289fb03291b4545b27ad6fd3329305dfae113f331e8523fcb90148cc6560405160405180910390a45050505050565b600254604080517f9b15b8b2000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201849052604482018390525160009173__c:/dev/repos/VehicleMaintenanceRegis__91639b15b8b291606480820192602092909190829003018186803b158015611b9957600080fd5b505af4158015611bad573d6000803e3d6000fd5b505050506040513d6020811015611bc357600080fd5b50519392505050565b60015460a060020a900460ff1615611be357600080fd5b600054600160a060020a03163314611bfa57600080fd5b6002546040805160e660020a6303310377028152600160a060020a0390921660048301526024820183905251829173__c:/dev/repos/VehicleMaintenanceRegis__9163cc40ddc091604480820192602092909190829003018186803b158015611c6457600080fd5b505af4158015611c78573d6000803e3d6000fd5b505050506040513d6020811015611c8e57600080fd5b50511515611c9b57600080fd5b600254604080517fac926120000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820184905251839173__c:/dev/repos/VehicleMaintenanceRegis__9163ac92612091604480820192602092909190829003018186803b158015611d1b57600080fd5b505af4158015611d2f573d6000803e3d6000fd5b505050506040513d6020811015611d4557600080fd5b50511515611d5257600080fd5b600254604080517fd8263dac000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052600060448301819052905173__c:/dev/repos/VehicleMaintenanceRegis__9263d8263dac926064808301939192829003018186803b158015611dd657600080fd5b505af4158015611dea573d6000803e3d6000fd5b50506040518592507f77a26bc01a7c1a1fc488dda7972e7db7e69f5d94fb4a553c00e2dfc462f216789150600090a2505050565b600254600090611e3d90600160a060020a03168363ffffffff61230f16565b6060015192915050565b600054600160a060020a0390811691161490565b6000805481908190600160a060020a03163314611e7757600080fd5b600092505b8351831015611fd4578383815181101515611e9357fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600160a060020a038516926370a08231926024808401938290030181600087803b158015611efd57600080fd5b505af1158015611f11573d6000803e3d6000fd5b505050506040513d6020811015611f2757600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b158015611f9d57600080fd5b505af1158015611fb1573d6000803e3d6000fd5b505050506040513d6020811015611fc757600080fd5b5050600190920191611e7c565b600054600160a060020a0316ff5b600054600160a060020a03163314611ff957600080fd5b600354600160a060020a0390811690829081168214801590612028575061202881600160a060020a0316612337565b151561203357600080fd5b50506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254604080517f15f22968000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018390525160009173__c:/dev/repos/VehicleMaintenanceRegis__916315f2296891604480820192602092909190829003018186803b1580156105da57600080fd5b600154600160a060020a031681565b600054600160a060020a0316331461210b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600090819060a060020a900460ff161561215657600080fd5b600254839061217490600160a060020a03168263ffffffff61230f16565b511561217f57600080fd5b61218833611e47565b151561219357600080fd5b600354604080517f88a6f57200000000000000000000000000000000000000000000000000000000815290513492600160a060020a0316916388a6f5729160048083019260209291908290030181600087803b1580156121f257600080fd5b505af1158015612206573d6000803e3d6000fd5b505050506040513d602081101561221c57600080fd5b5051111561222957600080fd5b600254604080517f1e87dd3a000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018690523360448301525173__c:/dev/repos/VehicleMaintenanceRegis__91631e87dd3a916064808301926020929190829003018186803b1580156122ac57600080fd5b505af41580156122c0573d6000803e3d6000fd5b505050506040513d60208110156122d657600080fd5b5051604051909250849083907f477b3314cd7115720db0596138d56c5433466f6c53df7c920e096fbc06bc175e90600090a35092915050565b6123176126db565b6000612323848461233f565b905061232f8482612451565b949350505050565b6000903b1190565b6040805160208082018490527f6e756d626572000000000000000000000000000000000000000000000000000082840152825160268184030181526046909201928390528151600093600160a060020a0387169363ac09455393909282918401908083835b602083106123c35780518252601f1990920191602091820191016123a4565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff88167c01000000000000000000000000000000000000000000000000000000000283526004830152925160248083019650939450929083900301905081600087803b15801561243d57600080fd5b505af1158015611bad573d6000803e3d6000fd5b6124596126db565b6124616126db565b60a06040519081016040528084815260200161247d86866124bf565b815260200161248c8686612546565b600160a060020a031681526020016124a486866125cd565b151581526020016124b58686612654565b9052949350505050565b600082600160a060020a031663025ec81a8360405160200180828152602001807f6964000000000000000000000000000000000000000000000000000000000000815250600201915050604051602081830303815290604052604051808280519060200190808383602083106123c35780518252601f1990920191602091820191016123a4565b600082600160a060020a0316634c77e5ba8360405160200180828152602001807f6f776e6572000000000000000000000000000000000000000000000000000000815250600501915050604051602081830303815290604052604051808280519060200190808383602083106123c35780518252601f1990920191602091820191016123a4565b600082600160a060020a03166317e7dd228360405160200180828152602001807f656e61626c656400000000000000000000000000000000000000000000000000815250600701915050604051602081830303815290604052604051808280519060200190808383602083106123c35780518252601f1990920191602091820191016123a4565b600082600160a060020a031663ac0945538360405160200180828152602001807f6372656174656400000000000000000000000000000000000000000000000000815250600701915050604051602081830303815290604052604051808280519060200190808383602083106123c35780518252601f1990920191602091820191016123a4565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a723058201a473d33eafdb7f2a87e42ce6a7d094f7c42849ce589ce27903091cdfc50b1ac0029";

            var regex = new Regex("__(.*?)__");
            var matches = regex.Matches(byteCode);
            var distinct = matches.Select(m => m.Value).Distinct().ToArray();

            Assert.Single(distinct);
            Assert.Equal("__c:/dev/repos/VehicleMaintenanceRegis__", distinct[0]);
        }

        public async Task<string> DeployContract(
            IAccount account,
            string abiFileName, 
            object[] constructorArgs = null,
            IEnumerable<Tuple<string, string>> libraryToAddressMappings = null)
        {
            var binFileName = Path.ChangeExtension(abiFileName, ".bin");

            var solidityContractFolder = SolidityContractFolder;
            var abiPath = Path.Combine(solidityContractFolder, abiFileName);
            var byteCodePath = Path.Combine(solidityContractFolder, binFileName);

            var abi = File.ReadAllText(abiPath);
            var byteCode = File.ReadAllText(byteCodePath);

            if (libraryToAddressMappings != null)
            {
                byteCode = LinkLibrary(libraryToAddressMappings, byteCode);
            }

            var web3 = new Web3(account);
            var deployContract = new DeployContract(web3.TransactionManager);

            var estimatedGas = await deployContract.EstimateGasAsync(abi, byteCode, account.Address, constructorArgs);

            var gas = new HexBigInteger(estimatedGas);

            var result = await deployContract.SendRequestAndWaitForReceiptAsync(
                abi, byteCode, account.Address, gas, (CancellationTokenSource)null, constructorArgs);

            return result.ContractAddress;

        }

        private static string LinkLibrary(IEnumerable<Tuple<string, string>> libraryToAddressMappings, string byteCode)
        {
            foreach (var token in libraryToAddressMappings)
            {
                var valueToReplace = token.Item1.StartsWith("__") && token.Item2.EndsWith("__") ?
                    token.Item1 :
                    $"__{token.Item1.Trim().Replace("_", "")}__";

                var replacementValue = token.Item2.RemoveHexPrefix();

                byteCode = byteCode.Replace(valueToReplace, replacementValue);
            }

            return byteCode;
        }
    }
}
